#!/usr/bin/env ruby

require 'rubygems'
require 'trollop'
#require 'dorothy2'

load '../lib/dorothy2.rb'

include DoroEnv
include Dorothy


opts = Trollop.options do
  banner <<-EOS

	The Dorothy Malware Analysis Framework 2.0

  marco.riccardi@
	www.honeynet.it


	Usage:
	Manager.rb [options]
	where [options] are:
  EOS


  opt :verbose, "Enable verbose mode"
  opt :infoflow, "Print the analysis flow"
  opt :source, "Choose a source (manual|honeypot|ztracker)", :type => :string
  opt :daemon, "Stay in the backround, by constantly pooling datasources"

end

if opts[:infoflow]
  puts "
	The Dorothy Malware Analysis Framework 2.0
	---------------Execution Flow-------------
	#0) Fetch new malwares
	#1) Start VM
	#2) Copy File to VM
	#3) Start Sniffer
	#4) Execute file into VM
	#5) Make screenshop
	#6) Wait X minutes (configure X in the conf file)
	#7) Stop Sniffer
	#8) Download Screenshot and trafficdump
	#9) Try to retreive malware info from VirusTotal
	#10) Insert data to Dorothy-DB
	------------------------------------------
	"
  exit(0)
end

conf = '../etc/dorothy.yml'
sfile = '../etc/sources.yml'
sboxfile = '../etc/sandboxes.yml'

DoroConfig.exists?(conf) ? DoroSettings.load!(conf) : DoroConfig.create

if DoroConfig.exists?(sfile)
  sources = YAML.load_file(sfile)
else
  puts "[WARNING]".red + " A source file doesn't exist, please crate one in the /etc folder"
  exit(0)
end

if DoroConfig.exists?(sboxfile)
  sources = YAML.load_file(sboxfile)
else
  puts "[WARNING]".red + " There is no sandbox configured yet. Please do it now"
  DoroConfig.create_sandbox
end


VERBOSE = (opts[:verbose] ? true : false)
daemon = (opts[:daemon] ? true : false)

if opts[:source] && !sources.key?(opts[:source])
  puts "The selected source is not yet configured.\nThe available sources are: "
  puts sources.keys
  exit(0)
end

#Logging
logout = (daemon ? DoroSettings.env[:logfile] : STDOUT)
LOGGER = DoroLogger.new(logout, DoroSettings.env[:logage])
LOGGER.sev_threshold = DoroSettings.env[:loglevel]

puts "sources selected:"
puts sources[opts[:source]].to_yaml


begin
  Dorothy.start sources[opts[:source]], daemon
rescue => e
  LOGGER.error "Dorothy", "An error occurred: " + $!
  LOGGER.debug "Dorothy", "#{e.inspect} --BACKTRACE:  #{e.backtrace}"
  LOGGER.error "Dorothy", "Dorothy has been stopped"
end

