#!/usr/bin/env ruby

# Copyright (C) 2010-2013 marco riccardi.
# This file is part of Dorothy - http://www.honeynet.it/
# See the file 'LICENSE' for copying permission.

require 'rubygems'
require 'trollop'
require 'dorothy2'          #comment for testing/developmnet
require 'doroParser'

#load '../lib/dorothy2.rb'  #uncomment for testing/developmnet
#load '../lib/doroParser.rb'


include Dorothy
include DoroParser

def start_wgui
  DoroGUI.run!(
      :environment => DoroSettings.wgui[:environment],
      :bind => DoroSettings.wgui[:host],
      :port => DoroSettings.wgui[:port])
end


def doro_forker(dmodule)
  fork do

    unless Util.check_pid_file(DoroSettings.env[:pidfiles] + "/#{dmodule}.pid")

      puts "[" + "+".red + "] " + "[#{dmodule.upcase}]".yellow + " Going in backround with pid #{Process.pid}"
      Util.create_pid_file(DoroSettings.env[:pidfiles] + "/#{dmodule}.pid", Process.pid)

      case dmodule
        when 'webgui'
          puts "[" + "+".red + "] " + "[#{dmodule.upcase}]".yellow + " Launching Web interface at http://#{DoroSettings.wgui[:host]}:#{DoroSettings.wgui[:port]}"
          require File.dirname(__FILE__) + '/../lib/doroGUI'
          puts "[" + "+".red + "] " + "[#{dmodule.upcase}]".yellow + " Logging at #{DoroSettings.wgui[:logfile]}"   if DEBUG

          STDOUT.reopen DoroSettings.wgui[:logfile]
          STDERR.reopen DoroSettings.wgui[:logfile]
          start_wgui
        when 'bfm'
          STDOUT.reopen DoroSettings.env[:logfile]
          STDERR.reopen DoroSettings.env[:logfile]
          DorothyFetcher.loader(@selected_sources, true)

        when 'analyser'
          puts "[" + "+".red + "] " + "[#{dmodule.upcase}]".yellow + " Logging at #{DoroSettings.env[:logfile]}" if DEBUG

          STDOUT.reopen DoroSettings.env[:logfile]
          STDERR.reopen DoroSettings.env[:logfile]
          Dorothy.start(true)

        when 'dem'
          puts "[" + "+".red + "] " + "[#{dmodule.upcase}]".yellow + " Logging at #{DoroSettings.env[:logfile_parser]}"  if DEBUG

          STDOUT.reopen DoroSettings.env[:logfile_parser]
          STDERR.reopen DoroSettings.env[:logfile_parser]
          DoroParser.start(true)
      end
    end


  end
end




opts = Trollop.options do
  banner <<-EOS

   ####################################################
   ##                                                ##
   ##  The Dorothy Malware Analysis Framework 2.0    ##
   ##                                                ##
   ####################################################

        marco.riccardi@honeynet.it
	www.honeynet.it/dorothy


	Usage:
  dorothy2 [options]
	where [options] are:
  EOS

  opt :Version, "Print the current version."
  opt :verbose, "Enable verbose mode"
  opt :infoflow, "Print the analysis flow"
  opt :baseline, "Create a new process baseline", :type => :string
  opt :source, "Choose a source (from the ones defined in etc/sources.yml)", :type => :string
  opt :CreateSource, "Create new source file"
  opt :daemon, "(start|stop) Execute/kill the selected module (-W, -B, -A) in backround. If no modules are specified, it will exec/kill all of them.", :type => :string
  opt :debug, "Add extensive log trails"
  opt :manual, "Start everything, copy the file, and wait for me."
  opt :SandboxUpdate, "Update Dorothive with the new Sandbox file"
  opt :DorothiveInit, "(RE)Install the Dorothy Database (Dorothive)", :type => :string
  opt :queue, "Show the analysis queue"
  opt :Analyser, "Execute only the Analyser Module (will analalyse only the current queue)"
  opt :BFM, "Execute only the Binary Fetcher Module (BFM)"
  opt :DEM, "Execute only the network Data Extation Module (DEM) aka doroParser"
  opt :WebGUI, "Execute the WebGUI Module (WGUI)"


end

print_proc = "
	The Dorothy Malware Analysis Framework 2.0
	---------------Execution Flow-------------
	#0) Fetch new malwares
	#1) Start VM
	#2) Copy File to VM
	#3) Start Sniffer
	#4) Execute file into VM
	#5) Make screenshot
	#6) Wait X minutes (configure X in the conf file)
  #7) Save the running processes
	#8) Stop Sniffer
	#9) Download Screenshot and trafficdump
	#10) Compare the aquired process list with the one taken during the baseline run. Find the new spawned processes.
  #11) Try to retreive malware info from VirusTotal
	#12) Insert data into Dorothy-DB
	------------------------------------------
"

if opts[:infoflow]
  puts print_proc
  exit(0)
end

if opts[:Version]
  puts "Dorothy ".yellow + Dorothy::VERSION
  exit(0)
end

puts "

   ####################################################
   ##                                                ##
   ##  The Dorothy Malware Analysis Framework 2.0    ##
   ##          marco.riccardi@honeynet.it            ##
   ####################################################

"

#VARS
HOME = File.expand_path("..",File.dirname(__FILE__))
VERBOSE = (opts[:verbose] ? true : false)
MANUAL =  (opts[:manual] ? true : false)
DEBUG = (opts[:debug] ? true : false)



modules2daemonise = []


#DEFAULT CONF FILES
#conf = HOME + '/etc/dorothy.yml'

conf = "#{File.expand_path("~")}/.dorothy.yml"


#LOAD ENV
if Util.exists?(conf)
  DoroSettings.load!(conf)
else
  DoroConfig.create
  exit(0)
end



home = DoroSettings.env[:home]
sfile = home + '/etc/sources.yml'
sboxfile = home + '/etc/sandboxes.yml'
profiles = home + '/etc/profiles.yml'


case opts[:daemon]
  when "start" then
    if MANUAL
      "[Dorothy]".yellow + " Manual and Deamon modes can't be executed together"
      exit(1)
    end

    daemon = true
  when "stop" then

    #TODO the following two line sure can be avoided somehow...
    LOGGER = DoroLogger.new(DoroSettings.env[:logfile], DoroSettings.env[:logage])
    LOGGER.sev_threshold = DoroSettings.env[:loglevel]

    modules2stop = []

    if opts[:BFM]
      modules2stop.push 'bfm'

    elsif  opts[:Analyser]
      modules2stop.push 'analyser'

    elsif opts[:WebGUI]
      modules2stop.push 'webgui'

    elsif opts[:DEM]
      modules2stop.push 'dem'

    end

    #if not specified, close all of them
    modules2stop = %w(bfm analyser webgui dem) if modules2stop.empty?

    modules2stop.each do |dmodule|
      Util.stop_process(dmodule)
    end

    exit(0)

  else
    daemon = false
end


#Logging
if daemon
  logout =  DoroSettings.env[:logfile]
  logout2=   DoroSettings.env[:logfile_parser]
else
  logout = logout2 = STDOUT
end

LOGGER = DoroLogger.new(logout, DoroSettings.env[:logage])
LOGGER_PARSER = DoroLogger.new(logout2, DoroSettings.env[:logage])
LOGGER.sev_threshold = LOGGER_PARSER.sev_threshold = DoroSettings.env[:loglevel]



#check homefolder
unless Util.exists?(home)
  DoroConfig.init_home(home)
end


if opts[:baseline]
  profile =  Util.load_profile(opts[:baseline])
  exit(1) unless profile
  puts "[" + "+".red + "] " +  "[Analyser]".yellow + " Creating a new process baseline."
  Dorothy.run_baseline(profile)
  puts "[" + "+".red + "] " +  "[Analyser]".yellow + " Baseline run finished."
  exit(0)
end



if opts[:DorothiveInit]
  Util.init_db(opts[:DorothiveInit])
  puts "[" + "+".red + "] " +  "[Dorothy]".yellow + " Database loaded, now you can restart Dorothy!"
  exit(0)
end

#INIT DB Connector
begin
  db = Insertdb.new
rescue => e
  if e.inspect =~ /exist/
    puts "[" + "+".red + "] " +  "WARNING".yellow + " The database doesn't exist yet. Press Enter to load the ddl into the DB"
    gets
    Util.init_db(DoroSettings.dorothive[:ddl])
    exit(0)
  else
    puts "[" + "+".red + "] " +  "ERROR".red + " Can't connect to the database"
    puts e
    exit(0)
  end
end


if opts[:SandboxUpdate]
  puts "[" + "+".red + "] " +  "[Dorothy]".yellow + " Loading #{sboxfile} into Dorothive"
  DoroConfig.init_sandbox(sboxfile)
  puts "[" + "+".red + "] " +  "[Dorothy]".yellow + " Done."
  exit(0)
end

if opts[:CreateSource]
  puts "[" + "+".red + "] " +  "[Dorothy]".yellow + " Creating a new binary source file"
  DoroConfig.create_sources(sfile)
  puts "[" + "+".red + "] " +  "[Dorothy]".yellow + " Done."
  exit(0)
end

if opts[:queue]
  db.analysis_queue_view
  exit(0)
end


#check if Source file exists
unless Util.exists?(sfile)
  puts "[" + "+".red + "] " +  "[WARNING]".red + " A source file doesn't exist. Please fill the following info in order to create one now."
  DoroConfig.create_sources(sfile)
  puts "[" + "+".red + "] " +  "[WARNING]".red + " A source file has been created, please restart dorothy!"
end

#check if Sandbox file exists
unless Util.exists?(sboxfile)
  puts "[" + "+".red + "] " +  "[WARNING]".red + " There is no sandbox configured yet. Please do it now."
  DoroConfig.create_sandbox(sboxfile)
  DoroConfig.init_sandbox(sboxfile)
end

#check if Profile file exists
unless Util.exists?(profiles)
  puts "[" + "+".red + "] " +  "[WARNING]".red + " There is no profiles configured yet. A default one is being created for you."

  #We use the first sandbox as default
  firts_sandbox =  YAML.load_file(sboxfile).first[1]
  DoroConfig.create_profiles(profiles, firts_sandbox, DoroSettings.virustotal[:vtapikey].empty?)
end

#Check DB sandbox data
if db.table_empty?("sandboxes")
  puts "[" + "+".red + "] " +  "[WARNING]".red + " No sandbox found in Dorothive, the DB will be filled with " + sboxfile
  DoroConfig.init_sandbox(sboxfile)
end

#Check if a baseline is present for every profile specified
YAML.load_file(profiles).each_key do |profile|
  profile_vars =  Util.load_profile(profile)

  baseline_file = "#{DoroSettings.env[:home]}/etc/#{profile_vars[0]}_baseline_procs.yml"

  unless Util.exists?(baseline_file)
    puts "[" + "+".red + "] " +  "[WARNING]".red + " There is no process-baseline file for the #{profile} profile. Dorothy is going to create one now."
    Dorothy.run_baseline(profile_vars)
    puts "[" + "+".red + "] " +  "[WARNING]".red + " Baseline run finished."
    exit(0)
  end

end


sources = YAML.load_file(sfile)

#check if Sources dir exist
sources.keys.each do |s|
  unless Util.exists?("#{sources[s]["localdir"]}")
    LOGGER.warn "INIT", "Warning, the source's localdir #{s} (#{sources[s]["localdir"]}) doesn't exist yet, I'm going to create it right now.."
    Dir.mkdir("#{sources[s]["localdir"]}")
    LOGGER.debug "INIT", "Source's localdir #{s} created."
  end
end

#CHECK CONF CHANGES
%w(sources.yml sandboxes.yml).each do |f|
  full_p = DoroSettings.env[:home] + '/etc/' + f
  c_md5 =  Digest::MD5.hexdigest(File.read(full_p))
  o_md5 = db.find_last_conf_chksum(f)
  if o_md5.nil?
    puts "#{f} not presend in the database, adding"
    db.insert("cfg_chk", ['default', f, c_md5, Util.get_time])
    db.check_sources_modifications(sources) if f == "sources.yml"
  elsif c_md5 != o_md5
    puts "The version of #{f} present into the database has changed, fixing this accordingly"
    db.insert("cfg_chk", ['default', f, c_md5, Util.get_time])
    db.check_sources_modifications(sources) if f == "sources.yml"
    DoroConfig.init_sandbox(sboxfile) if f == "sandboxes.yml"
  end
end

db.close




if opts[:source]
  unless sources.key?(opts[:source])
    puts "[" + "+".red + "] " +  "[WARNING]".red + " The selected source is not yet configured. The available sources are: "
    sources.keys.each do |k|
      puts "[" + "-".red + "] " +  k
    end
    exit(0)
  end
  @selected_sources = sources.select {|k,v| k == opts[:source]}
end

if opts[:BFM]
  if daemon
    modules2daemonise.push('bfm')
  else
    @selected_sources ||= sources
    DorothyFetcher.loader(@selected_sources)
    exit(0)
  end
end

if opts[:WebGUI]
  if daemon
    modules2daemonise.push('webgui')
  else
    require File.dirname(__FILE__) + '/../lib/doroGUI'
    puts "[" + "+".red + "] " +  "[WGUI]".yellow + "Starting WebGUI at http://#{DoroSettings.wgui[:host]}:#{DoroSettings.wgui[:port]}"
    start_wgui
    exit(0)
  end
end


if opts[:Analyser]
  if daemon
    modules2daemonise.push('analyser')
  else
    puts "[" + "+".red + "] " +  "[Analyser]".yellow + "Starting the analyser."
    Dorothy.start(daemon)
    exit(0)
  end
end

if opts[:DEM]
  #check pcapr
  if DoroSettings.pcapr[:local]=="true"
    if system "sh -c 'type startpcapr > /dev/null 2>&1'"
      pcapr_conf = "#{File.expand_path("~")}/.pcapr_local/config"
      unless Util.exists?(pcapr_conf)
        puts "[WARNING]".red + " Pcapr conf not found at #{File.expand_path("~")}/.pcapr_local/config "
        puts "[WARNING]".red + " Although you have configured Dorothy in order to look for a *local* Pcapr instance,it seems that it is not configured yet,so please run \"startpcapr\" and configure it."
        exit(1)
      end
    else
      puts "[WARNING]".red + " Although you have configured Dorothy in order to look for a *local* Pcapr instance, it seems *NOT INSTALLED* in your system.\n\t Please install it by typing \"sudo gem install pcapr-local\. Then set Pcapr to scan #{DoroSettings.env[:analysis_dir]}"
      exit(1)
    end
  end

  if daemon
    modules2daemonise.push('dem')
  else
    puts "[" + "+".red + "] " +  "[DEM]".yellow + "Starting the network Data Extration Module (DEM)."
    DoroParser.start(daemon)
    exit(0)
  end
end



begin

  @selected_sources ||= sources

  if daemon
    modules2daemonise = %w(webgui bfm analyser dem) if modules2daemonise.empty?

    modules2daemonise.each do |dmodule|
      doro_forker(dmodule)
    end

  else
    DorothyFetcher.loader(@selected_sources, daemon)
    Dorothy.start(daemon)
  end

rescue SignalException
  LOGGER.warn "Analyser", "SIGINT".red + " Catched, exiting gracefully."
rescue => e
  puts "[" + "+".red + "] " +  "[Dorothy]".yellow + " An error occurred: \n".red + e.inspect
  puts "[" + "+".red + "] " +  "[Dorothy]".yellow + " For more information check the logfile \n" + e.inspect if daemon
  LOGGER.error "Dorothy", "An error occurred: \n" + e.inspect
  LOGGER.debug "Dorothy", "#{e.inspect} --BACKTRACE:  #{e.backtrace}"
  LOGGER.info "Dorothy", "Dorothy has been stopped"
end
