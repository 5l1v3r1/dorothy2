#!/usr/bin/env ruby

# Copyright (C) 2013 marco riccardi.
# This file is part of Dorothy - http://www.honeynet.it/
# See the file 'LICENSE' for copying permission.

require 'rubygems'
require 'trollop'
require 'dorothy2'
require 'doroParser'

#load '../lib/doroParser.rb'

include Dorothy
include DoroParser



opts = Trollop.options do
  banner <<-EOS

   ####################################################
   ##                                                ##
   ##  The Dorothy Malware Analysis Framework 2.0    ##
   ##                                                ##
   ####################################################

        marco.riccardi@honeynet.it
	www.honeynet.it/dorothy


	Usage:
  dparser_start [options]
	where [options] are:
  EOS

  opt :verbose, "Enable verbose mode"
  opt :nonetbios, "Hide Netbios communication"
  opt :daemon, "Stay in the backroud, by constantly pooling datasources"

end

def get_time
  time = Time.new
  return time.utc.strftime("%Y-%m-%d %H:%M:%S")
end


NONETBIOS = opts[:nonetbios] ? true : false
VERBOSE = opts[:verbose] ? true : false
daemon = opts[:daemon] ? true : false



conf = "#{File.expand_path("~")}/.dorothy.yml"
DoroSettings.load!(conf)

#Logging
logout = (daemon ? DoroSettings.env[:logfile_parser] : STDOUT)
LOGGER_PARSER = DoroLogger.new(logout, DoroSettings.env[:logage])
LOGGER_PARSER.sev_threshold = DoroSettings.env[:loglevel]

LOGGER = DoroLogger.new(logout, DoroSettings.env[:logage])
LOGGER.sev_threshold = DoroSettings.env[:loglevel]

begin
  DoroParser.start(daemon)
rescue => e
  puts "[PARSER]".yellow + " An error occurred: ".red + $!
  puts "[PARSER]".yellow + " For more information check the logfile" + $! if daemon
  LOGGER_PARSER.error "Parser", "An error occurred: " + $!
  LOGGER_PARSER.debug "Parser", "#{e.inspect} --BACKTRACE: #{e.backtrace}"
  LOGGER_PARSER.info "Parser", "Dorothy-Parser has been stopped"
end

